RaspPi SD Card Initialization

1. Download latest image of Raspian Wheezy
Used here: RASPBIAN - Debian Wheezy 
Release date: 2015-05-05
Default login:pi / raspberry
Kernel version:3.18
https://www.raspberrypi.org/downloads/
Verify SHA-1:cb799af077930ff7cbcfaa251b4c6e25b11483de
$ openssl sha1 2015-05-05-raspbian-wheezy.zip

2. Write the downloaded image to a card according to this guideline:
https://www.raspberrypi.org/documentation/installation/installing-images/README.md
	cd into the folder with the image
$ diskutil list
/dev/disk0
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *1.0 TB     disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS Macintosh HD            698.0 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
   4:       Microsoft Basic Data BOOTCAMP                301.7 GB   disk0s4
/dev/disk1
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *31.4 GB    disk1
   1:             Windows_FAT_32 NO NAME                 31.4 GB    disk1s1

Identify the disk (not partition) of your SD card e.g. disk1 

$ diskutil unmountDisk /dev/disk1
Unmount of all volumes on disk1 was successful

$ sudo dd bs=1m if=2015-05-05-raspbian-wheezy.img of=/dev/disk1
(This takes several minutes.)
3125+0 records in
3125+0 records out
3276800000 bytes transferred in 950.170971 secs (3448643 bytes/sec)

3. Hook RPi to power and ethernet(access to internet).
Connect To RPi with a screen via hdmi and boot rpi up.

4. in ‘raspi-config’ shown on attached screen:
Change Password (option 1) to ‘opadula1’ 
Enable Camera (option 5.)
Advanced options (option 8.)
	A4 SSH (enable)
	A0 Update tool to the latest version
<Finish> raspi-config 

5. Set up partition table
	Expand mmcblk0p2 to reasonable size (6 GB) for system files:
	$ sudo fdisk /dev/mmcblk0
	command: p
	then command: d 2
	then command: n p 2 122880 11841630
	Note: the 11841630 is for approximately 6gb
	then command: w
	Note: writes the table
	$ sudo shutdown -r now
	
	$ sudo resize2fs /dev/mmcblk0p2
	$ df -h
	this should show 47% use

	Create and format new partition: mmcblk0p3 
	(This will store user files):	
	$ sudo fdisk /dev/mmcblk0
	command: n p 3 11841631 61407231
	command: w
	$ sudo shutdown -r now
	$ sudo mkfs.ext4 /dev/mmcblk0p3
	Mount your new partition:
	$ sudo mount /dev/mmcblk0p3 /media/tmp
	$ cd /home
	$ sudo cp -rp ./ /media/tmp
	$ sudo umount /media/tmp
	$ sudo rm -rf /media/tmp 
	#(get rid of the tmp folder)
	$ sudo mv /home /old_home
	$ sudo mkdir /home
	the add the following line to /etc/fstab/:
	/dev/mmcblk0p3 /home ext4 defaults,noatime,nodiratime 0 0
	$ sudo mount /home
	After you have confirmed everything is working and copied over and you don't need 	your old home directory, you can delete it.
	$ sudo rm -fr /old_home

6. Change keyboard Layout
	$ sudo vi /etc/default/keyboard
	It should look like this:
	# KEYBOARD CONFIGURATION FILE
	# Consult the keyboard(5) manual page.
	XKBMODEL="pc105"
	XKBLAYOUT="us"
	XKBVARIANT=""
	XKBOPTIONS=""

	BACKSPACE="guess"
	
	then save	

7. Upgrade/update kernel
	$ sudo apt-get update
	$ sudo apt-get upgrade

8. Clone fishcode repo
	$ cd ~
	$ mkdir ros
	$ mkdir ros/src
	$ cd ros/src
	$ git clone rkk@login.csail.mit.edu:/afs/csail.mit.edu/group/drl/softrobotics/fishcode.git
	$ cd fishcode
	$ git checkout dev

9. Install vim
	$ sudo apt-get install vim

10. Configure Edimax wifi dongle and replace fstab
	# Get wpasupplicant(probably not necessary)
	$ sudo apt-get install wpasupplicant 
	$ cd ~/ros/src/fishcode/rpi_setup
	
	# Make a backup of the wifi settings:
	$ sudo cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf.bk
	
	# add the wifi of the access point
	$ sudo cp wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf
	
	# copy settings for wifi:
	$ sudo cp 8192cu.conf /etc/modprobe.d/
	
	# make a backup of fstab
	$ sudo cp /etc/fstab /etc/fstab.bk
	
	# copy the fstab		
	$ sudo cp fstab /etc/fstab

11. Reboot to remount system filesystems read-only
	$ sudo reboot
	# If there are errors, try to fix	- TODO: what could happen here?

12. Install ROS Indigo -- big step
	[from instructions online at http://wiki.ros.org/ROSberryPi/Installing%20ROS%20Indigo%20on%20Raspberry%20Pi]

	# re-mount system partition as writeable for this install
	$ sudo mount /dev/mmcblk0p2 -o remount,rw

	# setup ROS Repos
	$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu wheezy main" > /etc/apt/sources.list.d/ros-latest.list'
	$ wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -
	$ sudo apt-get update
	$ sudo apt-get upgrade

	# install bootstrap dependencies
	$ sudo apt-get install python-setuptools python-pip python-yaml python-argparse python-distribute python-docutils python-dateutil python-setuptools python-six
	$ sudo pip install rosdep rosinstall_generator wstool rosinstall

	# initialize rosdep
	$ sudo rosdep init
	$ rosdep update
	
	# Now actual installation of ROS Indigo begins
	# create catkin workspace
	$ mkdir ~/ros_catkin_ws
	$ cd ~/ros_catkin_ws

	# download Ros source (this step will take a while) (ROS-Comm: (recommended) ROS package, build, and communication libraries. No GUI tools.)
	$ rosinstall_generator ros_comm --rosdistro indigo --deps --wet-only --exclude roslisp --tar > indigo-ros_comm-wet.rosinstall
	$ wstool init src indigo-ros_comm-wet.rosinstall
	
	# only ros-comm and desktop variants tested on raspberry pi…

	# Resolve dependencies (Before you can build your catkin workspace you need to make sure that you have all the required dependencies.)
	# (Needed for Ros_Comm: libconsole-bridge-dev and liblz4-dev)
	$ mkdir ~/ros_catkin_ws/external_src
	$ sudo apt-get install checkinstall cmake
	$ sudo sh -c 'echo "deb-src http://mirrordirector.raspbian.org/raspbian/ testing main contrib non-free rpi" >> /etc/apt/sources.list'
	$ sudo apt-get update

	# Install libconsole-bridge-dev
	$ cd ~/ros_catkin_ws/external_src
	$ sudo apt-get build-dep console-bridge
	$ apt-get source -b console-bridge
	$ sudo dpkg -i libconsole-bridge0.2_*.deb libconsole-bridge-dev_*.deb

	# Install liblz4-dev
	$ cd ~/ros_catkin_ws/external_src
	$ apt-get source -b lz4
	$ sudo dpkg -i liblz4-*.deb

	# Resolve remaining dependencies with rosdep
	$ cd ~/ros_catkin_ws
	$ rosdep install --from-paths src --ignore-src --rosdistro indigo -y -r --os=debian:wheezy
	There will be an ERROR that the following rosdeps failed to install
  	apt: Failed to detect successful installation of [python-rospkg]
  	apt: Failed to detect successful installation of [python-catkin-pkg]
  	apt: Failed to detect successful installation of [python-rosdep]
	NOTE from web on this: python:any was very recently added and the version of apt on wheezy doesn't handle it ( https://bugs.launchpad.net/ubuntu/+so... ). It can be ignored because those packages are installed on pip.

	# Build the workspace and install
	$ sudo ./src/catkin/bin/catkin_make_isolated --install -DCMAKE_BUILD_TYPE=Release --install-space /opt/ros/indigo
	# should show: <== Finished processing package [48 of 48]: 'rosbag'

	# Add the following line to ~/.bashrc
	source /opt/ros/indigo/setup.bash

8. XXX Install rpi camera library

9. XXX Install OpenCV


$ sudo mount /dev/mmcblk0p2 -o remount,ro